/*
 * VGA.c
 *
 *  Created on: Oct 15, 2015
 *      Author: Andrew Powell
 */
#include "VGA.h"

void vga_setup(vga* vga_obj,uint32_t* config_address,vga_frame* vga_frame_obj) {
	vga_obj->config_address = config_address;
	vga_obj->vga_frame_obj = vga_frame_obj;
	vga_frame_clear(vga_frame_obj);
	vga_obj->config_address[VGA_ADDR_ADDRESS_REG] = (uint32_t)vga_frame_obj;
	vga_set_start(vga_obj,1);
}

void vga_frame_draw_circle_filled(vga_frame* vga_frame_obj,int x_0,int y_0,int radius,vga_pixel color) {
	int x,y;
	int x_new,y_new;
	int radius_squared = radius*radius;
	for(y=-radius; y<=radius; y++) {
	    for(x=-radius; x<=radius; x++) {
	    	x_new = x + x_0;
	    	y_new = y + y_0;
	        if(vga_is_within_borders_x(x_new)&&
	        		vga_is_within_borders_y(y_new)&&
	        		(((x*x)+(y*y)) < radius_squared)) {
	        	vga_frame_get_pixel(vga_frame_obj)[y_new][x_new] = color;
	        }
	    }
	}
}

void vga_frame_draw_rectangle_filled(vga_frame* vga_frame_obj,int x_0,int y_0,int width,
		int height,vga_pixel color) {
	int x,y;
	int x_new,y_new;
	for(y=0; y<=height; y++) {
		for(x=0; x<=width; x++) {
			x_new = x + x_0;
			y_new = y + y_0;
			if (vga_is_within_borders_x(x_new)&&
	        		vga_is_within_borders_y(y_new)) {
				vga_frame_get_pixel(vga_frame_obj)[y_new][x_new] = color;
			}
		}
	}
}

/*
This routine access the DRAM frame buffer directly, for speed purposes.
The input is the number of iterations in the Mandelbrot calculation.
It converts the number of Mandelbrot iterations to a color, and writes to DRAM memory.
NOTE: Each 32-bit memory location in DRAM holds two pixels worth of data. Organized as:
        x,R,G,B,x,R,G,B  (x = 4 bits of don't care. R,G,B are also 4 bits) The first set
        of RGB values represents the pixel immediately to the RIGHT of the second set of RGB values.
NOTE: Address values must increment by 4 (two pixels of data = 32 bits), so 0x200000, 0x200004, 0x200008, etc...
 */
void vga_set_pixel( int x, int y, int color) {
	int cdata, temp, index, lorr;
	uint32_t* address;
	// convert iterations (color) to a 16 bit color value (cdata)
	if( color < 16 ) cdata = (color&0xf);
	else if( color < 32 ) cdata = ((color&0xf) << 4) + 0x000f;
	else if( color < 48 ) cdata = (15 - (color&0xf)) + 0x00f0;
	else if( color < 64 ) cdata = ((color&0xf) << 8) + 0x00f0;
	else if( color < 80 ) cdata = 0x0ff0;
	else if( color < 96 ) cdata = (color&0xf) + 0x0ff0;
	else if( color < 255 ) cdata = 0x0fff;
	else cdata = 0;
	// calc address of the 32-bit word that holds data for this x,y pixel.
	index = (640*y + x);
	lorr = index % 2;    // lorr=0 for an even address (left screen pixel), 1 for an odd address (right screen pixel)
	// now calculate the address of the memory in the VGA frame buffer where the value will go.
	address = (void * ) VGA_FRAME_ADDRESS + ((index >> 1) << 2); // make index count 0,0,2,2,4,4,... then 0,0,4,4,8,8,12,12,...
	// read the data that is already there.
	temp = *address;
	// OR in the 16-bit cdata value calculated above.
	if( lorr == 1 ) {
		cdata = cdata << 16;
		temp = temp & 0x0000ffff;
		temp = temp | cdata;
	}
	else {
		temp = temp & 0xffff0000;
		temp = temp | cdata;
	}
	*address = temp;    // Write the pixel to the VGA frame buffer in DRAM memory.
	return;
}
