/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

//#include <stdio.h>
#include "platform.h"
#include "xparameters.h"
#include "xgpio.h"
#include "xstatus.h"
#include "xil_printf.h"

#include "VGA.h"
#include "xil_mmu.h"
#include "xil_assert.h"

/* Definitions */
#define GPIO_DEVICE_ID  XPAR_AXI_GPIO_0_DEVICE_ID	/* GPIO device that LEDs are connected to */
#define LED 0xC3									/* Initial LED value - XX0000XX */
#define LED_DELAY 100000000							/* Software delay length */
#define LED_CHANNEL 1								/* GPIO port for LEDs */
#define printf xil_printf							/* smaller, optimised printf */

#define VGA_CONFIG_BASE_ADDRESS 	0x43c00000
//XPAR_VGA_0_S_AXI_CONFIG_BASEADDR
#define VGA_FRAME_ADDRESS 			0x00200000
#define VGA_MEMORY_ATTRIBUTE 0x00010c06

void vga_set_pixel( int x, int y, int color) {
	int cdata, temp, index, lorr;
	uint32_t* address;
	//xil_printf("---------------------------------\n\r");
	// convert color to a 16 bit value
	if( color < 16 ) cdata = (color&0xf);
	else if( color < 32 ) cdata = ((color&0xf) << 4) + 0x000f;
	else if( color < 48 ) cdata = (15 - (color&0xf)) + 0x00f0;
	else if( color < 64 ) cdata = ((color&0xf) << 8) + 0x00f0;
	else if( color < 80 ) cdata = (color&0xf) + 0x0ff0;
	else if( color < 256 ) cdata = 0x0fff;
	else cdata = 0;
	//xil_printf("cdata = %x\n\r", cdata);
	// calc address of affected byte.
	index = (640*y + x);
	lorr = index % 2;    // lorr=0 for an even address (left screen pixel), 1 for an odd address (right screen pixel)
	//xil_printf("lorr = %x\n\r", lorr);
	// shift cdata into proper postition, ready to be OR'd into the VGA pixel memory
	if( lorr == 0 ) cdata = cdata << 16;
	// now calculate the address of the memory in the VGA frame buffer where the value will go.
	address = (void * ) 0x00200000 + ((index & (~0x1)) << 1); // make index count 0,0,2,2,4,4,... then 0,0,4,4,8,8,12,12,...
	//xil_printf("Address = %x\n\r", address);
	// read the data that is already there.
	temp = *address;
	//xil_printf("Read data = %x\n\r", temp);
	// OR in the 16-bit value calculated above.
	if( lorr == 0 ) {
		cdata = cdata * 1;   // This somehow turns 0x0000_012f into 0x012f_0000. Magic. I hate C.
		//xil_printf("shifted cdata = %x\n\r", cdata);
		temp = temp & 0x0000ffff;
		temp = temp | cdata;
	}
	else {
		temp = temp & 0xffff0000;
		temp = temp | cdata;
	}
	//xil_printf("Wrote data = %x  at address %x\n\r", temp, address);
	*address = temp;
	return;
}

//void vga_set_pixel_direct( vga_frame* vga_frame_obj, int x, int y, vga_pixel color) {
//	 vga_frame_get_pixel_direct(vga_frame_obj)[y][x] = color;
//}

XGpio Gpio;											/* GPIO Device driver instance */

vga vga_obj;
vga_frame vga_frame_obj;
vga_pixel vga_pixel_obj;

int j;

int main()
{
    //init_platform();
	//volatile int Delay;
	int Status;
	int led = LED; /* Hold current LED value. Initialise to LED definition */
//---------------  LEDS  --------------------------------------------------
	/* GPIO driver initialisation */
	Status = XGpio_Initialize(&Gpio, GPIO_DEVICE_ID);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}
	/*Set the direction for the LEDs to output. */
	XGpio_SetDataDirection(&Gpio, LED_CHANNEL, 0x00);
	/* Write output to the LEDs. */
	XGpio_DiscreteWrite(&Gpio, LED_CHANNEL, led);
	xil_printf("-------------------------------------------\n\r");
	//xil_printf("GPIO device = %x\n\r", XPAR_AXI_GPIO_0_DEVICE_ID);
	//xil_printf("Gpio = %x\n\r", Gpio);
	//xil_printf("Read from 0x1000_0000: %x\n\r", Xil_In32(0x10000000) );
	//--------------  END OF LEDS  ---------------------------------------------

    print("Hello World\n\r");

    /* Configure frame buffer memory to device. */
Xil_SetTlbAttributes(VGA_FRAME_ADDRESS,VGA_MEMORY_ATTRIBUTE);

    /* Configure the vga object. */
vga_setup(&vga_obj,(uint32_t*)VGA_CONFIG_BASE_ADDRESS,(vga_frame*)VGA_FRAME_ADDRESS);

    /* Clear frame, draw simple circle, draw to display. */
    vga_pixel_setup( &vga_pixel_obj, 0x4,0x4,0x4);
    vga_frame_clear( &vga_frame_obj);
    vga_frame_draw_circle_filled( &vga_frame_obj,VGA_SCREEN_WIDTH>>1,VGA_SCREEN_HEIGHT>>1,100,vga_pixel_obj);
    vga_frame_draw( &vga_frame_obj, &vga_obj);

    for( j=0; j<200; j++) {
    	vga_set_pixel( j, j, j);
    }

// -----------  DEBUG STUFF  ----------------------------------------------------
    xil_printf("Config registers at: %x\n\r", VGA_CONFIG_BASE_ADDRESS);
//Xil_Out32( (u32) 0x43c00000, 0x00200000 );
//xil_printf("Wrote 0x43c0_0000. Read: %x\n\r", Xil_In32(0x43c00000) );
    //xil_printf("Read from 0x1000_0000: %x\n\r", Xil_In32(0x10000000) );
    //Xil_Out32( (u32) 0x10000000, 0x0 );
    //xil_printf("Read from 0x1000_0000: %x\n\r", Xil_In32(0x10000000) );
//Xil_Out32( (u32) 0x43c00008, 0x1 );
//xil_printf("Wrote 0x43c0_0008. Read: %x\n\r", Xil_In32(0x43c00008) );
//----------  END OF DEBUG ------------------------------------------------------

    //cleanup_platform();
    return 0;
}
